import ase
import dpdata
import os
import numpy as np
from dftio.io.parse import Parser, ParserRegister
from dftio.register import Register
from dftio.data import _keys

@ParserRegister.register("pyatb")
class PyatbParser(Parser):
    """
    PYATB parser is commonly used for normal input file generated by 'pyatb_input ... --band' and running 'pyatb'
    locally in generated 'pyatb' directory.

    Which should be like:
    pyatb/
    |-- Input
    |-- Out
    |   |-- Band_Structure
    |   |   |-- band.dat *
    |   |   |-- band.pdf
    |   |   |-- band_info.dat
    |   |   |-- high_symmetry_kpoint.dat
    |   |   |-- kpt.dat *
    |   |   |-- plot_band.py
    |   |   `-- x_coor_array.dat
    |   |-- input.json
    |   `-- running.log
    |-- STRU *
    `-- get_Energy.out

    * means essential, but normally you will get other output files as well.
    """

    def __init__(
            self,
            root,
            prefix,
            **kwargs
            ):
        super(PyatbParser, self).__init__(root, prefix)
        self.raw_sys = [
            dpdata.System(os.path.join(self.raw_datas[idx], 'pyatb', "STRU"), fmt="abacus/stru") for
            idx in range(len(self.raw_datas))]

    # essential
    def get_structure(self, idx):
        sys = self.raw_sys[idx]
        
        structure = {
            _keys.ATOMIC_NUMBERS_KEY: np.array([ase.atom.atomic_numbers[i] for i in sys.data["atom_names"]], dtype=np.int32)[sys.data["atom_types"]],
            _keys.PBC_KEY: np.array([True, True, True]) # abacus does not allow non-pbc structure
        }
        structure[_keys.POSITIONS_KEY] = sys.data["coords"].astype(np.float32)
        structure[_keys.CELL_KEY] = sys.data["cells"].astype(np.float32)

        return structure
    
    # essential
    def get_eigenvalue(self, idx, band_index_min=0):
        path = self.raw_datas[idx]

        assert os.path.exists(os.path.join(path, 'pyatb', "Out", "Band_Structure", "band.dat"))
        eigs = np.loadtxt(os.path.join(path, 'pyatb', "Out", "Band_Structure", "band.dat"))[np.newaxis, :, band_index_min:]
        assert os.path.exists(os.path.join(path, 'pyatb', "Out", "Band_Structure", "kpt.dat"))
        kpts = np.loadtxt(os.path.join(path, 'pyatb', "Out", "Band_Structure", "kpt.dat"))

        return {_keys.ENERGY_EIGENVALUE_KEY: eigs.astype(np.float32), _keys.KPOINT_KEY: kpts.astype(np.float32)}
    
    # essential
    def get_basis(self, idx):
        raise NotImplementedError("PYATB does not support block parsing yet.")
    
    # essential
    def get_blocks(self, idx, hamiltonian=True, overlap=False, density_matrix=False):
        raise NotImplementedError("PYATB does not support block parsing yet.")